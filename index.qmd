---
title: "NaAMPHoRA: A High-Resolution Database of Fossil and Modern Pollen Records from the Mediterranean, Arabian and North African regions"
author:
  
  - name: Irene Solano
    id: is
    orcid: 0000-0001-5667-6008
    email: irene13@liverpool.ac.uk
    affiliation: 
      - name: Department	of	Evolution,	Ecology	 and	Behaviour,	University	of	Liverpool, Liverpool, UK

  - name: Jakob Bro-Jorgensen
    id: jb
    affiliation: 
        - name: Department	of	Evolution,	Ecology	 and	Behaviour,	University	of	Liverpool, Liverpool, UK

  - name: Ignacio A. Lazagabaster
    id: ial
    affiliation: 
      - name: Department	of	Evolution,	Ecology	 and	Behaviour,	University	of	Liverpool, Liverpool, UK

      - name: Centro	Nacional	de	Investigación	Sobre	 Evolución	Humana	CENIEH, Burgos, Spain
     
  - name: Chris D. Thomas
    id: ct
    affiliation: 
      - name: Leverhulme	Centre	for	Anthropocene	 Biodiversity,	Department	of	Biology,	 University	of	York, York, UK

  - name: Saúl Manzano
    id: sm
    affiliation: 
      - name: Área de Botánica, Departamento de Biodiversidad y Gestión Ambiental, Facultad de Ciencias Biológicas y Ambientales, Universidad de León, León, Spain

abstract: > 
 The Sahara, the world's largest desert, has undergone significant climatic fluctuations. During the Quaternary, variations in orbital insolation led to alternating humid and arid periods, influencing vegetation distribution and biogeographic patterns. Plant migrations from different regions into the Sahara, have contributed to the region’s complex floral history. Fossil pollen records are crucial for reconstructing past vegetation and climate, offering insights into the origin and distribution of past flora. Despite the significant contributions of the African Pollen Database (APD) and Neotoma, access to Northern African and Arabian pollen data remains limited, particularly for large-scale analyses. This paper aims to address these challenges by compiling and providing machine-readable access to the most comprehensive set of pollen records available for the region.
keywords:
  - Pollen records
  - Palaeoecology
  - Holocene
  - Databases
license: "CC BY"
copyright: 
  holder: Irene Solano
  year: 2025
citation: 
  container-title: Scientific Data
  volume: x 
  issue: x
  doi: x
funding: "The author received funding from NERC ACCE DTP and the University of Liverpool"
output: html_document
toc: true  # Add table of contents for navigation
number-sections: true
execute:
  echo: false  # Do not show R code in the final report
  warning: false  # Suppress warnings
editor: 
  markdown: 
    wrap: 72
---

# Table of Contents

1.  [Introduction](#intro)

2.  [Project structure](#project-structure)

3.  [Data pipeline](#data-pipeline)

    3.1. [Project set up](#project-setup)

    3.2. [Data Preparation](#data-preparation)

    3.3. [Data Visualisation](#data-visualisation)

    3.4. [Metadata](#metadata)

    3.5. [Functions](#functions)

4.  [References](#references)

# Introduction {#intro}

![](images/Database_logo.png)

The ***NaAMPHoRA*** (*North African, Arabian, and Mediterranean Pollen
Holocene Records Archive*) is a high-resolution database compiling
fossil and modern pollen records from North Africa, Arabia, and the
Mediterranean.

The database includes fossil and modern pollen records, both raw and
harmonised, as well as uncalibrated and calibrated radiocarbon dates.
The harmonised pollen list provides information on growth form (habit),
phytogeographical affinity categorisation, and 15 plant functional
traits.

Pollen records and radiocarbon dates were sourced from the Neotoma
(https://www.neotomadb.org/) and African Pollen Database (APD:
https://africanpollendatabase.ipsl.fr/#/home) databases, and unpublished
data were obtained directly from the authors. Growth form and
phytogeographical affinity data for each harmonised pollen type were
compiled using the Global Biodiversity Information Facility (GBIF:
https://www.gbif.org/), the Plants of the World Online (POWO:
https://powo.science.kew.org/) website, and relevant literature, while
plant functional traits were retrieved from the Botanical Information
and Ecology Network (BIEN: https://bien.nceas.ucsb.edu/bien/ ) and TRY
Plant Trait Database (TRY: https://www.try-db.org/TryWeb/Home.php)
databases.

# Project structure {#project-structure}

Different sections (folders) of the project are as follows:

-   `data/`: All raw and processed data are stored in this folder.

    -   `/raw_data`: contains raw data on the following subfolders:

        -   `/age_data`: contains information on radiocarbon dates and
            their calibration for each dated pollen record.

            -   `/calibration`: contains calibration data for each dated
                fossil pollen record. If more than two radiocarbon dates
                are available, calibration is performed using a Bayesian
                age-depth model with the *rbacon* R package
                (`Bacon_runs` folder). If only a single date is
                reported, calibration is performed using the *rice* R
                package (`Single_depth_calibration` folder).

            -   `/radiocarbon`: contains the uncalibrated radiocarbon
                dates for each dated fossil pollen record. Obtained from
                the APD (https://africanpollendatabase.ipsl.fr/#/home),
                from Neotoma (https://www.neotomadb.org/), from Giesecke
                *et al.* (2014) \[1\], and from the authors directly.

        -   `/mapping_data`: contains the WWF terrestrial ecoregions of
            the world shapefile `/EcoregionsWWF_2017` (retrieved from
            https://www.worldwildlife.org/publications/terrestrial-ecoregions-of-the-world)
            and the elevation raster file (*elevation.tiff*) obtained
            from Lazagabaster *et al.* (2024). \[2\]

        -   `/plant_functional_types`: contains the `/TRY` folder, which
            includes plant functional trait data (i.e. leaf type trait)
            downloaded from the TRY database. Specifically, it contains
            a list of original taxa present in the TRY database
            (TryAccSpecies.csv), a list of taxa selected for download
            (Try_list_download.csv) and the trait information retrieved
            from the database for the selected taxa (leaf_type_TRY.xlsx)

        -   `/pollen_data`: contains raw fossil (`/fossil` folder) and
            modern (`/modern` folder) pollen records, obtained from the
            APD (https://africanpollendatabase.ipsl.fr/#/home), from
            Neotoma (https://www.neotomadb.org/) using the neotoma2
            package and the Neotoma API, and from the authors directly.

        -   `/taxonomy`: contains the following subfolders:

            -   `harmonisation_lists`: contains taxonomic harmonisation
                resources, including harmonisation tables from Lézine
                *et al*. (2009) \[3\], Mottl *et al.* (2021) \[4\] and
                the APD taxonomy list
                (https://africanpollendatabase.ipsl.fr/#/taxon-dict) &
                the pollen inventory from Vincens *et al.* (2007) \[5\],
                which includes information on habit, habitat and
                phytogeographical distribution of APD pollen types;

            -   `raw_taxa_list`: contains the *raw_pollen_types.csv*
                file, which lists the raw pollen types from all pollen
                records compiled in the *NaAMPHoRA* database.

    -   `/processed_data:` contains processed data on the following
        subfolders:

        -   `/age_calibrated`: contains calibrated radiocarbon dates for
            each dated pollen record.

        -   `/phytogeographical_affinity`: contains a file listing the
            phytogeographical affinities for each harmonised pollen
            type.

        -   `/plant_functional_types`: contains the final processed
            plant functional traits data in the file *total_pfts.csv*.

        -   `/pollen_data`: contains processed fossil (`/fossil` folder)
            and modern (`/modern` folder) pollen records. Each folder
            includes:

            -   `/harmonised_counts`: harmonised pollen records with
                original counts.

            -   `/harmonised_percentages`: harmonised pollen records
                with calculated percentages.

        -    `/taxonomy`: contains the following:

            -   The *harmonised_taxonomy_list.csv* file created for the
                *NaAMPHoRA* database.

            -   The *phytogeographical_affinity.csv* file, which
                contains a list of the phytogeographical affinities for
                each harmonised pollen type.

-   `docs/`

    -   `/supplementary_info`: contains additional resources, organised
        into:

        -   `/original_excel_files_received_from_authors`: stores the
            original files provided by the authors.

        -   `/references`: contains the *pollen_records_references.bib,
            phytogeographical_affinity_references.bib,
            habit_references.bib, pfts_references.bib &
            taxonomy_references.bib* files.

        -   `/graphs`: contains graphs not included in the manuscript.

-   `images/`: contains the PNG files of the database workflow and the
    database logo.

-   `index_files/`: The files created when rendered this html document.

-   `metadata/`

    -   `/age_calibrated`: contains the following:

        -   *calibration_information.csv:* a file that provides details
            on the calibration process for each record.

        -   *calibration_metadata.csv*: a file that contains metadata
            for the *calibration_information.csv* file.

        -   *calibration_metadata_html.html*: an html file that contains
            metadata for the *calibration_information.csv* file.

        -   `/calibration_metadata_html_files`: a folder that
            accompanies *calibration_metadata_html* and is generated
            when running script `calibration_metadata_html.qmd`.

    -   `/plant_functional_types`: contains the following:

        -   *pfts_categories.csv:* a file that provides a definition for
            each plant functional trait and the corresponding reference.

        -   *pfts_metadata.csv*: a file that contains metadata for the
            *total_pfts.csv* file.

        -   *pfts_metadata_html.html*: an html file that contains
            metadata for the *total_pfts.csv* file.

        -   `/pfts_metadata_html_files`: a folder that accompanies
            *taxonomy_metadata_html* and is generated when running
            script `pfts_metadata_html.qmd.`

    -   `/pollen_data`: contains the following:

        -   *database.csv:* a file that contains the metadata
            information for all the pollen records compiled in the
            *NaAMPHoRA* database.

        -   *pollen_metadata.csv*: a file that provides an explanation
            for each column of the *database.csv* file.

        -   *database_html.html*: an html file that contains metadata
            for the *database.csv* file.

        -   `/pollen_metadata_html_files`: a folder that accompanies
            *database.html* and is generated when running script
            `pollen_metadata_html.qmd.`

    -   `/references`: contains the file *database_references.csv*,
        which lists references for each category of the database (i.e.
        pollen records/age data, taxonomy, habit, phytogeographical
        affinity and plant functional traits).

    -   `/taxonomy`: contains the following:

        -   *taxonomy_metadata.csv*: a file that provides an explanation
            for each column of the *harmonised_taxonomy_list.csv* file.

        -   *taxonomy_metadata_html.html*: an html file that contains
            metadata for the *harmonised_taxonomy_list.csv* file.

        -   `/taxonomy_metadata_html_files`: a folder that accompanies
            *taxonomy_metadata_html* and is generated when running
            script `taxonomy_metadata_html.qmd.`

        -   *phytogeographical_affinity_categories.csv*: a file that
            provides a definition for each phytogeographical affinity
            category and the corresponding reference.

        -   *habit_categories.csv*: a file that provides a definition
            for each plant habit (growth form) and the corresponding
            reference.

-   `outputs/`: This folder contains all the outputs of the data
    visualisation in the form of maps (`outputs/maps/`) & graphs
    (`outputs/graphs/`).

-   `scripts/`: This folder contains all scripts of the data pipeline.
    It also includes the following subfolder:

    -   `/renv`: Stores all installed R packages along with a record of
        their versions. 

# Data pipeline {#data-pipeline}

Data extraction, processing, and visualisation are conducted in R v.
4.4.1., following this data pipeline:

![](images/Database%20diagram.png) *Run the scripts in the following
order:*

## Dependencies set up {#dependencies-setup}

`setup.R` (Run this script to install dependencies)

## Data Preparation {#data-preparation}

`01_pollen_list.R` (Extracts pollen records from Neotoma using the
neotoma2 v1.0.5 R package and generates a raw pollen list for taxonomic
harmonisation)

`02_harmonisation_lists.`*R* (Adds the number of pollen sequences per
pollen type and incorporates published harmonisation lists into the
harmonised taxonomy list)

`03_processing_pollen_data.R` (Processes raw pollen data, including
taxonomic harmonisation, radiocarbon date recalibration, and percentage
calculations)

`04_process_PFTs.R` (Downloads and processes plant functional traits
(PFTs) from the BIEN and TRY databases)

`05_calibrate_14C_bacon.R` (Calibrates radiocarbon dates using Bayesian
age-depth modelling with the rbacon v3.2.0 R package)

`06_calibrate_14C_single_depth.R` (Calibrates radiocarbon dates for
single-depth samples using the rice v1.0.0 R package)

`07_altitude_sites.R` (Assigns altitude values to sites lacking altitude
information)

## Data Visualisation {#data-visualisation}

`08_maps.R` (Creates maps of all fossil and modern pollen records
compiled in this database)

```{r}
#| echo: false
#| output: false
#| message: false

# Load libraries and functions----

source("functions.R")

libraries <- c("dplyr","readxl","readr","here","tidyr","BIEN","purrr","sp","terra","geodata","tidyterra","ggtext","ggplot2","openxlsx","stringr","leaflet","sf","quarto","htmlwidgets","terra","RColorBrewer")

# Install missing packages
invisible(lapply(libraries, install_if_missing))

# Load the libraries
lapply(libraries, require, character.only = TRUE)

# Read sites data
sites <- read_csv(normalizePath("../metadata/pollen_data/database.csv"))
sites$Latitude <- as.numeric(sites$Latitude)

## Fossil sites
fossil_sites <- sites |> filter(Pollen=="Fossil")  |>  select(Site_name_machine_readable,Longitude, Latitude,Dated, `Link to database`)
fossil_sites <- na.omit(fossil_sites)

## Modern sites
modern_sites <- sites |> filter(Pollen=="Modern") |>  select(Site_name_machine_readable,Longitude, Latitude,Dated,`Link to database`)

# Eliminate na rows
sites <- sites |>
  filter(!is.na(Dated))

# Create a color palette based on the "Dated" column
color_palette <- colorFactor(palette =  c("green", "red","blue"), domain = sites$Dated)

# Create leaflet map 

sites_map <- leaflet(sites) %>%
  addTiles(options = providerTileOptions(noWrap = TRUE)) %>%
  addCircleMarkers(
    lng = ~Longitude, lat = ~Latitude,  # Coordinates
    color = ~color_palette(Dated),  # Color based on "Dated"
    radius = 2, fillOpacity = 0.8,
    popup = ~paste( "<b>Name:</b>", Site_name_machine_readable, "<br>",
                    "<b>Dated:</b>", Dated, "<br>",
                    "<b>Link:</b>", `Link to database`, "<br>")  # Show name of site, date info and link
  ) %>%
  addLegend(
    position = "bottomright", 
    pal = color_palette, values = ~Dated, 
    title = "Dated", opacity = 1
  )

```

```{r}
#| fig-cap: "Figure 1. Map of pollen records (modern & dated and non-dated fossil records) compiled in the *NAAMPHoRA* database"
sites_map
```

```{r}
#| echo: false
#| output: false
#| message: false

# Phytogeographic_regions
Phytogeographic_regions <- sf::st_read(normalizePath("../data/raw_data/mapping_data/EcoregionsWWF_2017/wwf_terr_ecos.shp"))
Phytogeographic_regions <- sf::st_make_valid(Phytogeographic_regions)

Phytogeographic_regions_crop <- sf::st_crop(Phytogeographic_regions, ext(c(-19,70,0,50)))
Phytogeographic_regions_crop$ECO_NAME <- as.factor(Phytogeographic_regions_crop$ECO_NAME)
Phytogeographic_regions_crop$BIOME <- as.factor(Phytogeographic_regions_crop$BIOME)

biome_definitions <- read.csv(normalizePath("../data/raw_data/mapping_data/EcoregionsWWF_2017/Biome_definitions.csv"))
colnames(biome_definitions) <- c("BIOME","BIOME_definition")

# Merge the biome definitions with the shapefile 
Phytogeographic_regions_crop <- merge(Phytogeographic_regions_crop, biome_definitions, by = "BIOME", all.x = TRUE)

# Filter out rows where BIOME is 98 and BIOME_definition is NA or empty
Phytogeographic_regions_crop <- Phytogeographic_regions_crop[!(Phytogeographic_regions_crop$BIOME == 98 &  (is.na(Phytogeographic_regions_crop$BIOME_definition) | Phytogeographic_regions_crop$BIOME_definition == "")), ]

elevation <- rast(normalizePath("../data/raw_data/mapping_data/elevation.tiff"))
elevation_crop <- crop(elevation,ext(c(-19,70,0,50)))

## Calculate hillshade for further plotting
slopes <- terrain(elevation_crop, "slope", unit = "radians")
aspect <- terrain(elevation_crop, "aspect", unit = "radians")
hs <- shade(slopes, aspect) # base shade for elevation plotting


```

```{r}
#| echo: false
#| output: true
#| fig-cap: "Figure 2. Map of fossil (a) and modern (b) pollen records compiled in the *NAAMPHoRA* database and the biome map (c) from Olson et al. (2001)."
#| 
# Set up the layout for 2x2 plots with smaller margins to reduce space between plots
par(mfrow = c(2, 2), mar = c(4, 4, 2, 2), oma = c(0, 0, 0.5, 0)) 

# Plot 1: Raster with fossil sites
plot(hs, col = gray(0:100 / 100), legend = FALSE, axes = TRUE)
plot(elevation_crop, col = terrain.colors(25), alpha = 0.5, legend = FALSE, axes = FALSE, add = TRUE)
points(fossil_sites$Longitude[fossil_sites$Dated == "Yes"],  
       fossil_sites$Latitude[fossil_sites$Dated == "Yes"],  
       col = "blue", pch = 19, cex = 0.5)  
points(fossil_sites$Longitude[fossil_sites$Dated == "No"],  
       fossil_sites$Latitude[fossil_sites$Dated == "No"],  
       col = "red", pch = 19, cex = 0.5)  

# Add label "A" to Plot 1
mtext("(a)", side = 3, line = 0.1, at = -15, cex = 1)


# Plot 2: Raster with modern sites
plot(hs, col = gray(0:100 / 100), legend = FALSE, axes = TRUE)
plot(elevation_crop, col = terrain.colors(25), alpha = 0.5, legend = FALSE, axes = FALSE, add = TRUE)
points(modern_sites$Longitude,  
       modern_sites$Latitude,  
       col = "black", pch = 19, cex = 0.5)

# Add label "B" to Plot 2
mtext("(b)", side = 3, line = 0.1, at = -15, cex = 1)


# Plot 3: Phytogeographic regions (using `region_colors`)
# Number of unique BIOME categories
n <- length(unique(Phytogeographic_regions_crop$BIOME))

# Generate a color palette with enough colors for the categories
my_colors <- brewer.pal(n, "Set3")  

# Assign the colors to each BIOME category correctly
# Ensure that the levels of the factor align with the colors
Phytogeographic_regions_crop$col <- my_colors[as.factor(Phytogeographic_regions_crop$BIOME)]

# Plot the data with the assigned colors
plot(elevation_crop, col = adjustcolor(terrain.colors(100), alpha.f = 0.5), legend = FALSE)  # Base raster layer

plot(sf::st_geometry(Phytogeographic_regions_crop), 
     col = Phytogeographic_regions_crop$col, 
     add = TRUE,
     border = "black")

# Add label "C" to Plot 3
mtext("(c)", side = 3, line = 0.1, at = -15, cex = 1)

# Plot 4: Legends
# Create a blank plot
par(mar = c(0, 0, 0, 0))  # Remove margins for legend space
plot(1, type = "n", axes = FALSE, xlab = "", ylab = "")

# First legend (Phytogeographic Regions)
legend("top", 
       legend = unique(Phytogeographic_regions_crop$BIOME_definition),  # Correctly map BIOME_definition values
       fill = my_colors,  # Make sure this corresponds to the color palette
       border = "black", 
       cex = 0.7, 
       title = "Biomes", 
       bty = "n", 
       xpd = TRUE)

# Second legend (Site Categories)
legend("bottom", 
       legend = c("Dated", "Not dated", "Modern"), 
       fill = c("blue", "red", "black"), 
       border = "black", 
       cex = 0.7, 
       title = "Site categories", 
       bty = "n", 
       xpd = TRUE)
```

`09_description_database_figures.R` (Creates graphs to summarise and
describe the database)

```{r}
#| echo: false
#| output: false
#| message: false

# Read data
taxonomy <- read_csv(normalizePath("../data/processed_data/taxonomy/harmonised_taxonomy_list.csv"))
phyto_aff <- read_csv(normalizePath("../data/processed_data/taxonomy/phytogeographical_affinity.csv"))
pft <- read_csv(normalizePath("../data/processed_data/plant_functional_types/total_pfts.csv"))

# 1) Number sites per bigeographic region----

# Total sites
sites_biogeo <- sites |> select(Site_name_machine_readable,'Biogeographic area')

# Count number of total sites per biogeographic region
site_counts <- sites_biogeo |> 
  count(`Biogeographic area`)
names(site_counts)[2] <- "Total"

# Modern sites
modern_sites_biogeo <- sites |> filter(Pollen=="Modern") |> select(Site_name_machine_readable,'Biogeographic area')

# Count number of total sites per biogeographic region
modern_site_counts <- modern_sites_biogeo |> 
  count(`Biogeographic area`)
names(modern_site_counts)[2] <- "Modern"

# Dated sites
site_dated_filtered <- sites |> filter(Pollen=="Fossil")|> filter(Dated == "Yes")

sites_dated_biogeo <- site_dated_filtered |>  select(Site_name_machine_readable,'Biogeographic area')

# Count number of sites per biogeographic region
site_dated_counts <- sites_dated_biogeo |> 
  count(`Biogeographic area`)
names(site_dated_counts)[2] <- "Dated"

# Not dated sites
site_not_dated_filtered <- sites |> filter(Pollen=="Fossil")|> filter(Dated == "No")
sites_not_dated_biogeo <- site_not_dated_filtered |>  select(Site_name_machine_readable,'Biogeographic area')

# Count number of sites per biogeographic region
site_not_dated_counts <- sites_not_dated_biogeo |> 
  count(`Biogeographic area`)
names(site_not_dated_counts)[2] <- "Not dated"

# Merge all counts into one dataframe
sites_combined <- site_counts |> 
  left_join(modern_site_counts, by = "Biogeographic area") |> 
  left_join(site_dated_counts, by = "Biogeographic area") |> 
  left_join(site_not_dated_counts, by = "Biogeographic area")

# Reshape data to long format for ggplot
sites_long <- sites_combined |> 
  pivot_longer(cols = c("Total", "Modern","Dated", "Not dated"), 
               names_to = "Site Type", 
               values_to = "Count")


# Define the order of periods (modify according to your data)
order <- c("Total", "Modern","Dated", "Not dated")

# Convert `Period` into a factor with the specified order
sites_long$`Site Type` <- factor(sites_long$`Site Type`, levels = order)


# Create the grouped bar plot
combined_barplot <- ggplot(sites_long, aes(x = `Biogeographic area`, y = Count, fill = `Site Type`)) +
  geom_bar(stat = "identity", position = position_dodge(), color = "black") +  # Dodge bars side by side
  theme_minimal() +
  labs(x = "Biogeographic region", 
       y = "Number of sites", 
       fill = "Site type") +  # Ensure legend title is explicitly set
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 18),
        axis.text.y = element_text(size = 16),
        axis.title.x = element_text(size = 18),
        axis.title.y = element_text(size = 18),
        plot.title = element_text(size = 22, face = "bold"),
        legend.title = element_text(size = 16),  
        legend.text = element_text(size = 14))


# 2) Number sites (fossil and modern) per database----

# Total sites
sites_database <- sites |>  select(Site_name_machine_readable,Database, Pollen)

# Count number of total sites per database
total_counts <- sites_database |> 
  count(Database)
names(total_counts)[2] <- "Total"

# Dated sites
sites_database_fossil <- sites_database |> filter(Pollen=="Fossil")

# Count number of sites per biogeographic region
fossil_counts <- sites_database_fossil |> 
  count(Database)
names(fossil_counts)[2] <- "Fossil"

# Not dated sites
sites_database_modern <- sites_database |> filter(Pollen=="Modern")

# Count number of sites per biogeographic region
modern_counts <- sites_database_modern |> 
  count(Database)
names(modern_counts)[2] <- "Modern"

# Merge all counts into one dataframe
sites_combined_database <- total_counts |> 
  left_join(fossil_counts, by = "Database") |> 
  left_join(modern_counts, by = "Database")

sites_combined_database <- sites_combined_database |> filter(!Database == "APD/Neotoma")
sites_combined_database <- sites_combined_database |> mutate(Database = ifelse(Database == "Received from authors", "Received", Database))

# Reshape data to long format for ggplot
sites_long_database <- sites_combined_database |> 
  pivot_longer(cols = c("Total", "Fossil", "Modern"), 
               names_to = "Pollen Type", 
               values_to = "Count")

sites_long_database <- sites_long_database |> na.omit()
# Create the grouped bar plot
database_barplot <- ggplot(sites_long_database, aes(x = Database, y = Count, fill = `Pollen Type`)) +
  geom_bar(stat = "identity", position = position_dodge(), color = "black") +  # Dodge bars side by side
  theme_minimal() +
  labs(x = "Database", 
       y = "Number of sites", 
       fill = "Pollen type") +  # Ensure legend title is explicitly set
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 18),
        axis.text.y = element_text(size = 16),
        axis.title.x = element_text(size = 18),
        axis.title.y = element_text(size = 18),
        plot.title = element_text(size = 22, face = "bold"),
        legend.title = element_text(size = 16),  
        legend.text = element_text(size = 14))


# 3) Number of dated records per time interval----

sites_temporal <- sites |>  select(Site_name_machine_readable, "Minimum mean cal BP", "Maximum mean cal BP")
sites_temporal$`Maximum mean cal BP`  <- sites_temporal$`Maximum mean cal BP` |>  as.numeric()
sites_temporal$`Minimum mean cal BP`  <- sites_temporal$`Minimum mean cal BP` |>  as.numeric()

# Define bin width (1000-year intervals)
bin_width <- 1000

# Create bins based on both `Minimum mean cal BP` and `Maximum mean cal BP`
dated_records_binned <- sites_temporal %>%
  mutate(
    # Create bins based on the minimum and maximum cal BP range
    year_bin = cut(
      `Minimum mean cal BP`, 
      breaks = seq(0, max(`Maximum mean cal BP`, na.rm = TRUE) + bin_width, by = bin_width),
      labels = FALSE,  # Do not specify labels here, let `cut()` handle it
      include.lowest = TRUE
    )
  ) %>%
  count(year_bin)  # Count the number of records per bin

# Convert 'year_bin' back to a meaningful numeric label
dated_records_binned$year_bin <- as.numeric(as.character(dated_records_binned$year_bin)) * bin_width

dated_records_binned <- na.omit(dated_records_binned)

# Omit dates older than 32.000 years BP
dated_records_binned <- dated_records_binned[-c(23:30),]

# Create the bar plot
dated_records_temporal_distribution<- ggplot(dated_records_binned, aes(x = year_bin, y = n)) +
  geom_bar(stat = "identity", fill = "black", color = "black") +
  theme_minimal() +
  labs(x = "Years BP", y = "Number of sites") +
  scale_x_reverse() +  # Reverse x-axis to show recent years on the right
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 14),  # Increase font size of x-axis labels
        axis.text.y = element_text(size = 14),  # Increase font size of y-axis labels
        axis.title.x = element_text(size = 16),  # Increase font size of x-axis title
        axis.title.y = element_text(size = 16),  # Increase font size of y-axis title
        plot.title = element_text(size = 18), legend.position = "none") + # Increase plot title font size
  geom_vline(xintercept = c(5000, 14800), linetype = "dashed", color = "red", size = 1)  # Add vertical lines for the AHP interval


# 4) Latitudinal distribution of records according to their archive type----

sites_archive_type <- sites |> select(Site_name_machine_readable,Latitude,"Archive type")

# round latitude so it does not have decimals
sites_archive_type$Latitude <- as.numeric(sites_archive_type$Latitude)
sites_archive_type$Latitude <- round(sites_archive_type$Latitude,0)

names(sites_archive_type)[3] <- "Archive_type"

# Count the number of sites per latitude and archive type
sites_archive_type_count <- sites_archive_type %>%
  group_by(Latitude, Archive_type) %>%
  summarise(num_sites = n(), .groups = "drop")

sites_archive_type_count <- na.omit(sites_archive_type_count)

# Create the bar plot with different colors for each archive type
barplot_archive_type <- ggplot(sites_archive_type_count, aes(x = num_sites, y = factor(Latitude), fill = Archive_type)) +
  geom_col() +  # Creates bars for each latitude
  labs(
    x = "Number of sites",
    y = "Latitude",
    fill = "Archive Type",
  ) +
  theme_minimal() +
  theme(
    legend.position = "top", 
    legend.text = element_text(size = 10),  
    legend.title = element_text(size = 16, face = "bold"),  
    axis.text.x = element_text(size = 10), 
    axis.text.y = element_text(size = 8), 
    axis.title.x = element_text(size = 16, face = "bold"),  
    axis.title.y = element_text(size = 16, face = "bold"),  
    plot.title = element_text(size = 18, face = "bold", hjust = 0.5)  
  )


# 5) Altitudinal distribution of records according to the biogeographic area----

sites_altitude_type <- sites |> select(Site_name_machine_readable,Altitude,"Biogeographic area")

sites_altitude_type$Altitude <- as.numeric(sites_altitude_type$Altitude)

# Round down to nearest centennial
sites_altitude_type$Altitude <- floor(sites_altitude_type$Altitude / 100) * 100

names(sites_altitude_type)[3] <- "Biogeographic_area"

# Eliminate Atlantic ocean
sites_altitude_type <- sites_altitude_type |> filter(Biogeographic_area !="Atlantic ocean")

# Count the number of sites per altitude and biogeographic area
sites_altitude_type_count <- sites_altitude_type %>%
  group_by(Altitude, Biogeographic_area) %>%
  summarise(num_sites = n(), .groups = "drop")

sites_altitude_type_count <- na.omit(sites_altitude_type_count)

# Create the bar plot with different colors for each biogeographic area
barplot_altitude_biogeography <- ggplot(sites_altitude_type_count, aes(x = num_sites, y = factor(Altitude), fill = Biogeographic_area)) +
  geom_col() +  # Creates bars for each altitude
  labs(
    x = "Number of sites",
    y = "Altitude",
    fill = "Biogeographic area",
  ) +
  theme_minimal() +
  theme(
    legend.position = "top", 
    legend.text = element_text(size = 10),  
    legend.title = element_text(size = 16, face = "bold"),  
    axis.text.x = element_text(size = 10), 
    axis.text.y = element_text(size = 8), 
    axis.title.x = element_text(size = 16, face = "bold"),  
    axis.title.y = element_text(size = 16, face = "bold"),  
    plot.title = element_text(size = 18, face = "bold", hjust = 0.5)  
  )
# 6) Number of harmonised pollen taxa per phytogeographical affinity (proportion)----

# Reshape data into long format
phyto_aff_long <- phyto_aff %>%
  pivot_longer(cols = -Pollen_type_SM_morphological, # Keep Pollen_type_SM_morphological
               names_to = "Phytogeographical_Affinity", # Affinities become a new column
               values_to = "Presence") %>%  # Presence/absence info
  filter(Presence == "x")  # Keep only rows where the pollen type is associated with the affinity

# Count the occurrences of each phytogeographical affinity
affinity_counts <- phyto_aff_long %>%
  count(Phytogeographical_Affinity) %>%
  arrange(desc(n))  # Sort in descending order

# Calculate proportions 
affinity_percentages <- affinity_counts %>%
mutate(percentage = n / sum(n) * 100)

# Plotting the proportion of pollen types per phyto aff
phyto_aff_proportions_chart <- ggplot(affinity_percentages, aes(x = "Number of harmonised pollen taxa", y = n, fill = Phytogeographical_Affinity)) +
  geom_bar(stat = "identity", width = 1) +  
  coord_polar(theta = "y") +  # Convert to pie chart
  labs(x= "", y = "", fill= "Phytogeographical affinity") +  
  theme_minimal() +
  theme(axis.text.x = element_blank(),  
        axis.ticks = element_blank(), 
        axis.text.y = element_blank(),  
        legend.position = "right",       
        legend.title = element_text(size = 12, face = "bold"),  
        legend.key.size = unit(1, "cm"),  
        plot.margin = margin(10, 10, 10, 10)) +  
  scale_fill_manual(values = c("skyblue", "darkblue", "darkorange", "darkred", "lightgreen", 
                               "gold", "purple", "turquoise", "red", "violet", 
                               "yellow", "grey", "tomato", "darkgreen", 
                               "darkcyan", "indianred", "blue", "pink", "steelblue", "green"))  +
  geom_text(aes(label = paste0(round(percentage, 1), "%")), position = position_stack(vjust = 0.5), color = "black", size = 3) +  
  guides(fill = guide_legend(ncol = 2))  # Divide legend into two columns


# 7) Number of taxa (divided by family, genus and species) per plant functional trait -----

pft <- pft |> select(!c(Pollen_type_SM_morphological,Family,Genus,url_source,project_pi,project_pi_contact,Try_reference,Try_dataset,leaf_dry_mass_g))
                     
# Species (select those with two words)
species <- pft %>% 
  filter(str_detect(taxa, "^\\w+\\s+\\w+$"))
species_counts <- species |> select(-taxa) |> summarise(across(everything(), n_distinct, na.rm = TRUE))
species_counts <- t(species_counts) |> as.data.frame()
names(species_counts)[1] <- "species"


# Family (select taxa that ends with eae)
family <- pft %>% 
  filter(str_detect(taxa, "eae"))
family_counts <- family |> select(-taxa) |> summarise(across(everything(), n_distinct, na.rm = TRUE))
family_counts <- t(family_counts) |> as.data.frame()
names(family_counts)[1] <- "family"

# Genera
genera <- pft %>%
  filter(!taxa %in% species_counts$taxa & !taxa %in% family_counts$taxa)
genera_counts <-genera |> select(-taxa)|> summarise(across(everything(), n_distinct, na.rm = TRUE))
genera_counts <- t(genera_counts) |> as.data.frame()
names(genera_counts)[1] <- "genus"

# Merge all counts into one dataframe
pfts_counts_combined <- cbind(family_counts,genera_counts,species_counts)
pfts_counts_combined <- pfts_counts_combined %>%
  tibble::rownames_to_column(var = "row_name")  # Store row names

# Reshape data to long format for ggplot
pfts_counts_long <- pfts_counts_combined %>%
  pivot_longer(cols = -row_name, names_to = "category", values_to = "count")

# Define the order
order <- c( 
  "seed_mass_mg", 
  "whole_plant_height_m", 
  "leaf_area_mm2", 
  "leaf_nitrogen_content_per_leaf_dry_mass_mg_g_1", 
  "Leaf_dry_mass_per_area_g_mm_2", 
  "plant_flowering_begin_month", 
  "longest_whole_plant_longevity_years", 
  "leaf_life_span_months", 
  "plant_flowering_begin_date", 
  "whole_plant_growth_form_diversity", 
  "Leaf_type", 
  "whole_plant_dispersal_syndrome",  
  "whole_plant_vegetative_phenology", 
  "whole_plant_sexual_system",  
  "flower_pollination_syndrome"
)

# Ensure the row_name is a factor with the desired order
pfts_counts_long$row_name <- factor(pfts_counts_long$row_name, levels = order)

# Create the bar plot
pft_barplot <- ggplot(pfts_counts_long, aes(x = row_name, y = count, fill = category)) +
  geom_bar(stat = "identity", position = "dodge") +
  theme_minimal() +
  labs(x = "",
       y = "Count",
       fill = "Taxonomic Level") +
  scale_fill_manual(values = c("family" = "blue", "genus" = "green", "species" = "red")) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
        axis.text.y = element_text(size = 14),
        axis.title.x = element_text(size = 16),
        axis.title.y = element_text(size = 16),
        plot.title = element_text(size = 18, face = "bold"),
        legend.title = element_text(size = 14),  
        legend.text = element_text(size = 12),
        legend.position = "bottom")

```

```{r}
#| fig-cap: "Figure 3. Number of pollen records (sites) per biogeographic region"
combined_barplot
```

```{r}
#| fig-cap: "Figure 4. Number of pollen records (sites) per database"
database_barplot
```

```{r}
#| fig-cap: "Figure 5. Number of dated pollen records per time period in years before present. The red dashed lines indicate the African Humid Period (14,800 to 5,000 years Before Present)"
dated_records_temporal_distribution
```

```{r}
#| fig-cap: "Figure 7. Latitudinal distribution of pollen records (sites) according to their archive type"
barplot_archive_type
```

```{r}
#| fig-cap: "Figure 8. Altitudinal distribution of pollen records (sites) according to the biogeographic area"
barplot_altitude_biogeography
```

```{r}
#| fig-cap: "Figure 9. Proportion of harmonised pollen types per phytogeographical region"
phyto_aff_proportions_chart
```

```{r}
#| fig-cap: "Figure 10. Number of taxa per plant functional trait categorised by taxonomic level (i.e., family, genus, or species)."
pft_barplot
```

## Metadata {#metadata}

`pollen_metadata_html.qmd` (Generates a csv and HTML files containing
pollen metadata for the *database.csv* file)

`taxonomy_metadata_html.qmd` (Generates a csv and HTML files containing
metadata for the *harmonised_taxonomy_list.csv* file)

`pfts_metadata_html.qmd` (Generates a csv and HTML files containing
metadata for the *total_pfts.csv* file)

`calibration_metadata_html.qmd` (Generates a csv and HTML files
containing metadata for the calibration_information*.csv* file)

## Functions {#functions}

`functions.R` (Contains custom functions used throughout the data
pipeline)

# References {#references}

1.  Giesecke, T., et al. Towards mapping the late Quaternary vegetation
    change of Europe. *Vegetation History and Archaeobotany, 23*, 75–86.
    (2014).
2.  Lazagabaster, I. A., et al. Evaluating species distribution model
    predictions through time against paleozoological records. *Ecology
    and Evolution, 14*, e70288. (2024).
3.  Lézine, A. M., Watrin, J., Vincens, A., & Hély, C. Are modern pollen
    data representative of West African vegetation? *Review of
    Palaeobotany and Palynology, 156*, 265–276. (2009).
4.  Mott, O., et al. Global acceleration in rates of vegetation change
    over the past 18,000 years. *Science, 372*, 860–864. (2021).
5.  Vincens, A., Lézine, A. M., Buchet, G., Lewden, D., & Le Thomas, A.
    African pollen database inventory of tree and shrub pollen types.
    *Review of Palaeobotany and Palynology, 145*, 135–141. (2007).
