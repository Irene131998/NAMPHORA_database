---
title: "NaAMPHoRA: An Open-access Database of Fossil and Modern Pollen Records from the Mediterranean, Arabian and North African regions"
author:
  
  - name: Irene Solano
    id: is
    orcid: 0000-0001-5667-6008
    email: irene13@liverpool.ac.uk
    affiliation: 
      - name: Department	of	Evolution,	Ecology	 and	Behaviour,	University	of	Liverpool, Liverpool, UK

  - name: Jakob Bro-Jorgensen
    id: jb
    affiliation: 
        - name: Department	of	Evolution,	Ecology	 and	Behaviour,	University	of	Liverpool, Liverpool, UK

  - name: Ignacio A. Lazagabaster
    id: ial
    affiliation: 
      - name: Department	of	Evolution,	Ecology	 and	Behaviour,	University	of	Liverpool, Liverpool, UK

      - name: Centro	Nacional	de	Investigación	Sobre	 Evolución	Humana	CENIEH, Burgos, Spain
     
  - name: Chris D. Thomas
    id: ct
    affiliation: 
      - name: Leverhulme	Centre	for	Anthropocene	 Biodiversity,	Department	of	Biology,	 University	of	York, York, UK

  - name: Saúl Manzano
    id: sm
    affiliation: 
      - name: Área de Botánica, Departamento de Biodiversidad y Gestión Ambiental, Facultad de Ciencias Biológicas y Ambientales, Universidad de León, León, Spain

abstract: > 
 North Africa’s climate and vegetation have undergone major shifts during the Holocene, particularly during the African Humid Period. Fossil pollen records are crucial for reconstructing past vegetation and climate, offering insights into the origin and distribution of past flora. However, existing pollen databases, especially concerning North Africa, have several limitations, including the unavailability of some unpublished data and the absence of standardised information on plant traits. To address these issues, we introduce the North African, Arabian, and Mediterranean Pollen Holocene Records Archive (NaAMPHoRA)—a comprehensive, machine-readable database compiling fossil and modern pollen records alongside plant functional traits, phytogeographical data, and taxonomic harmonisation. This database will significantly improve the accuracy of palaeoecological reconstructions, enhance biogeographical analyses, and refine climate models for North Africa during the Holocene. It enables direct data retrieval via programming languages such as R, and all datasets and code are openly available via GitHub, with contributions and feedback welcomed.
keywords:
  - Pollen records
  - Plant functional traits
  - Palaeoecology
  - Holocene
  - African Humid Period (AHP)
  - Open-access database
  - NaAMPHoRA database
license: "CC BY"
copyright: 
  holder: Irene Solano
  year: 2025
citation: 
  container-title: Scientific Data
  volume: NA 
  issue: NA
  doi: NA
funding: "I.S. was supported by the PhD studentship Adapting to the Challenges of a Changing Environment (ACCE) Doctoral Training Partnership, funded by the Natural Environment Research Council (NERC) (Grant NE/S00713X/1) and the University of Liverpool."
output: html_document
toc: true  # Add table of contents for navigation
number-sections: true
execute:
  echo: false  # Do not show R code in the final report
  warning: false  # Suppress warnings
editor: 
  markdown: 
    wrap: 72
---

# Table of Contents

1.  [Introduction](#intro)

2.  [Project structure](#project-structure)

3.  [Data pipeline](#data-pipeline)

    3.1. [Project set up](#project-setup)

    3.2. [Data Preparation](#data-preparation)

    3.3. [Data Visualisation](#data-visualisation)

    3.4. [Metadata](#metadata)

    3.5. [Functions](#functions)

4.  [References](#references)

# Introduction {#intro}

![](images/Database_logo.png)

The ***NaAMPHoRA*** (*Northern Africa, Arabian, and Mediterranean Pollen
Holocene Records Archive*) is an open-access database that compiles
fossil and modern pollen records from North Africa, Arabia, and the
Mediterranean. The database includes fossil and modern pollen records,
as well as uncalibrated and calibrated radiocarbon dates (in calendar
years). The database also provides information on growth form (habit),
phytogeographic affinity, and plant functional traits (PFTs) for each
taxon in the database.

Pollen records and radiocarbon dates were sourced from Neotoma
(https://www.neotomadb.org/) and African Pollen Database (APD:
https://africanpollendatabase.ipsl.fr/#/home), and unpublished data were
obtained directly from the authors. Growth form and phytogeographic
affinity data for each harmonised pollen type were compiled using the
Global Biodiversity Information Facility (GBIF: https://www.gbif.org/),
the Plants of the World Online (POWO: https://powo.science.kew.org/)
website, and relevant literature, while plant functional traits were
retrieved from the Botanical Information and Ecology Network (BIEN:
https://bien.nceas.ucsb.edu/bien/ ) and TRY Plant Trait Database (TRY:
https://www.try-db.org/TryWeb/Home.php) databases.

# Project structure {#project-structure}

Different sections (folders) of the project are structured as follows:

-   `data/`: All raw and processed data are stored in this folder.

    -   `/raw_data`: Contains raw data on the following sub-folders:

        -   `/age_data`: Contains information on radiocarbon dates and
            their calibration for each dated pollen record.

            -   `/calibration`: Contains calibration data for each dated
                fossil pollen record. If more than two radiocarbon dates
                are available, calibration is performed using a Bayesian
                age-depth model with the *rbacon* R package
                (`Bacon_runs` folder). If only a single date is
                reported, calibration is performed using the *rice* R
                package (`Single_depth_calibration` folder).

            -   `/radiocarbon`: Contains the raw radiocarbon dates for
                each dated fossil pollen record. Obtained from the APD
                (https://africanpollendatabase.ipsl.fr/#/home), from
                Neotoma (https://www.neotomadb.org/), from Giesecke *et
                al.* (2014), and directly from the authors.

        -   `/mapping_data`: Contains the following:

            -   `/EcoregionsWWF_2017`: Includes the WWF terrestrial
                ecoregions of the world shapefile (retrieved from
                https://www.worldwildlife.org/publications/terrestrial-ecoregions-of-the-world).

            -   /`Regions_WWF_2017`: Includes a shapefile with the
                regions for Europe and the Arabian Peninsula modified
                from the WWF terrestrial ecoregions of the world
                shapefile in QGIS v. 3.28.1 - Firenze.

            -   `/Africa_Vegetation_White_1983`: Containes the
                phytoregions shapefile, which were defined by
                White (1983) (retrieved from
                https://www.miramon.cat/mmr/examples/miombo/docs/database/white/index.htm)

            -   The elevation raster file (*elevation.tiff*) obtained
                from Lazagabaster *et al.* (2024).

        -   `/plant_functional_types`: Contains the `/TRY` folder, which
            includes plant functional trait data (i.e. leaf type trait)
            downloaded from the TRY database. Specifically, it contains
            a list of original taxa present in the TRY database
            (*TryAccSpecies.csv*), a list of taxa selected for download
            (*Try_list_download.csv*) and the trait information
            retrieved from the database for the selected taxa
            (*leaf_type_TRY.xlsx*).

        -   `/pollen_data`: Contains raw fossil (`/fossil` folder) and
            modern (`/modern` folder) pollen records, obtained from the
            APD (https://africanpollendatabase.ipsl.fr/#/home), from
            Neotoma (https://www.neotomadb.org/) using the neotoma2
            package and the Neotoma API, and from the authors directly.

        -   `/taxonomy`: Contains the following sub-folders:

            -   `harmonisation_lists`: Includes taxonomic harmonisation
                resources, including harmonisation tables from Lézine
                *et al*. (2009), Mottl *et al.* (2021), the APD taxonomy
                list
                (https://africanpollendatabase.ipsl.fr/#/taxon-dict),
                and the pollen inventory from Vincens *et al.* (2007),
                which includes information on habit, habitat and
                photographic affinity of pollen types from the APD.

            -   `raw_taxa_list`: Contains the *raw_pollen_types.csv*
                file, which lists the raw pollen types from all pollen
                records compiled in the *NaAMPHoRA* database.

    -   `/processed_data:` Contains processed data on the following
        sub-folders:

        -   `/age_calibrated`: Contains recalibrated radiocarbon dates
            for each dated pollen record.

        -   `/plant_functional_types`: Contains the final plant
            functional traits data in the file *total_pfts.csv*.

        -   `/pollen_data`: Contains harmonised fossil (`/fossil`
            folder) and modern (`/modern` folder) pollen records. Each
            folder includes:

            -   `/harmonised_counts`: Harmonised pollen records with
                original counts.

            -   `/harmonised_percentages`: Harmonised pollen records
                with calculated percentages.

        -    `/taxonomy`: Contains the following:

            -   The *harmonised_taxonomy_list.csv* file, which contains
                a list of the original taxa and their corresponding
                harmonised names.

            -   The *phytogeographic_affinity.csv* file, which contains
                a list of the phytogeographic affinities for each
                harmonised pollen type.

-   `docs/`

    -   `/references`: Contains the following:

        -   `/pollen_records_references`: includes the references of the
            pollen records in .bib format.

        -   `/pfts_references`: includes the references of each trait
            retrieved from BIEN database in .bib format.

        -   `/taxonomy_references`: includes the references used for
            pollen taxonomy harmonisation in .bib format.

    -   `/supplementary_info`: Includes additional resources, organised
        into:

        -   `/original_excel_files_received_from_authors`: Stores the
            original files provided by the authors.

        -   `/graphs`: Contains graphs not included in the manuscript.

-   `images/`: Contains the PNG files of the database workflow and the
    database logo.

-   `index_files/`: The files created when rendered this html document.

-   `metadata/`

    -   `/age_calibrated`: Contains the following:

        -   *calibration_information.csv:* A file that provides details
            on the calibration process for each record.

        -   *calibration_metadata.csv*: A file that contains metadata
            for the *calibration_information.csv* file.

        -   *calibration_metadata.html*: An html file that contains
            metadata for the *calibration_information.csv* file.

        -   `/calibration_metadata_files`: The files created when
            rendered the script `calibration_metadata.qmd`.

    -   `/plant_functional_types`: Contains the following:

        -   *pfts_categories.csv:* A file that provides a definition for
            each plant functional trait and the corresponding reference.

        -   *pfts_metadata.csv*: A file that contains metadata for the
            *total_pfts.csv* file.

        -   *pfts_metadata.html*: An html file that contains metadata
            for the *total_pfts.csv* file.

        -   `/pfts_metadata_html_files`: The files created when rendered
            the script `pfts_metadata.qmd.`

    -   `/pollen_data`: Contains the following:

        -   *database.csv:* A file that contains the metadata
            information for all the pollen records compiled in the
            *NaAMPHoRA* database.

        -   *pollen_metadata.csv*: This file provides details
            descriptions of each column in the *database.csv* file.

        -   *database.html*: An html file that contains metadata for the
            *database.csv* file.

        -   `/pollen_metadata_files`: The files created when rendered
            the script `pollen_metadata.qmd.`

    -   `/references`: Contains the *database_references.csv* file,
        which lists references for each dataset (i.e. pollen records/age
        data, taxonomy, habit, and phytogeographic affinity).

    -   `/taxonomy`: Contains the following:

        -   *taxonomy_metadata.csv*: A file that provides an explanation
            for each column of the *harmonised_taxonomy_list.csv* file.

        -   *taxonomy_metadata.html*: An html file that contains
            metadata for the *harmonised_taxonomy_list.csv* file.

        -   `/taxonomy_metadata_files`: The files created when rendered
            the script `taxonomy_metadata.qmd.`

        -   *phytogeographic_affinity_categories.csv*: A file that
            provides a definition for each phytogeographic affinity
            category and the corresponding reference.

        -   *habit_categories.csv*: A file that provides a definition
            for each plant habit (growth form) and the corresponding
            reference.

-   `outputs/`: This folder contains all the outputs of the data
    visualisation in the form of maps (`outputs/maps/`) & graphs
    (`outputs/graphs/`).

-   `scripts/`: This folder contains all scripts of the data pipeline.
    It also includes the following sub-folder:

    -   `/renv`: Stores all installed R packages along with a record of
        their versions. 

# Data pipeline {#data-pipeline}

Data extraction, processing, and visualisation are conducted in R v.
4.4.1., following this data pipeline:

![](images/Database%20diagram.png)

*Run the scripts in the following order:*

## Dependencies set up {#dependencies-setup}

`setup.R` (Run this script to install dependencies)

## Data Preparation {#data-preparation}

`01_pollen_list.R` (Extracts pollen records from Neotoma using the
neotoma2 v1.0.5 R package and generates a raw pollen list for taxonomic
harmonisation)

`02_harmonisation_lists.`*R* (Adds the number of pollen sequences per
pollen type and incorporates published harmonisation lists into the
harmonised taxonomy list)

`03_processing_pollen_data.R` (Processes raw pollen data, including
taxonomic harmonisation, radiocarbon date re-calibration, and percentage
calculations)

`04_process_PFTs.R` (Downloads and processes plant functional traits
(PFTs) from the BIEN and TRY databases)

`05_calibrate_14C_bacon.R` (Calibrates radiocarbon dates using Bayesian
age-depth modelling with the rbacon v3.2.0 R package)

`06_calibrate_14C_single_depth.R` (Calibrates radiocarbon dates for
single-depth samples using the rice v1.0.0 R package)

`07_altitude_sites.R` (Assigns altitude values to sites lacking altitude
information)

## Data Visualisation {#data-visualisation}

`08_maps.R` (Creates maps of all fossil and modern pollen records
compiled in this database)

```{r}
#| echo: false
#| output: false
#| message: false

# Load libraries and functions----

source("functions.R")

libraries <- c("dplyr","readxl","readr","here","tidyr","BIEN","purrr","sp","terra","geodata","tidyterra","ggtext","ggplot2","openxlsx","stringr","leaflet","sf","quarto","htmlwidgets","terra","RColorBrewer")

# Install missing packages
invisible(lapply(libraries, install_if_missing))

# Load the libraries
lapply(libraries, require, character.only = TRUE)

# Read sites data
sites <- read_csv(normalizePath("../metadata/pollen_data/database.csv"))
sites$Latitude <- as.numeric(sites$Latitude)

## Fossil sites
fossil_sites <- sites |> filter(Pollen=="Fossil")  |>  select(Site_name_machine_readable,Longitude, Latitude,Dated, `Link to database`)
fossil_sites <- na.omit(fossil_sites)

## Modern sites
modern_sites <- sites |> filter(Pollen=="Modern") |>  select(Site_name_machine_readable,Longitude, Latitude,Dated,`Link to database`)

# Eliminate na rows
sites <- sites |>
  filter(!is.na(Dated))

# Create a color palette based on the "Dated" column
color_palette <- colorFactor(palette =  c("green", "red","blue"), domain = sites$Dated)

# Create leaflet map 

sites_map <- leaflet(sites) %>%
  addTiles(options = providerTileOptions(noWrap = TRUE)) %>%
  addCircleMarkers(
    lng = ~Longitude, lat = ~Latitude,  # Coordinates
    color = ~color_palette(Dated),  # Color based on "Dated"
    radius = 2, fillOpacity = 0.8,
    popup = ~paste( "<b>Name:</b>", Site_name_machine_readable, "<br>",
                    "<b>Dated:</b>", Dated, "<br>",
                    "<b>Link:</b>", `Link to database`, "<br>")  # Show name of site, date info and link
  ) %>%
  addLegend(
    position = "bottomright", 
    pal = color_palette, values = ~Dated, 
    title = "Dated", opacity = 1
  )

```

```{r}
#| fig-cap: "Figure 1. Map of pollen records (modern & dated and non-dated fossil records) compiled in the *NAAMPHoRA* database"
sites_map
```

```{r}
#| echo: false
#| output: false
#| message: false

## Biomes Olson (2001)----
biomes <- sf::st_read(normalizePath("../data/raw_data/mapping_data/EcoregionsWWF_2017/wwf_terr_ecos.shp"))
biomes <- sf::st_make_valid(biomes)
biomes <- sf::st_crop(biomes, ext(c(-19,62,0,46.5)))
biomes$BIOME <- as.factor(biomes$BIOME)

biome_definitions <- read.csv(normalizePath("../data/raw_data/mapping_data/EcoregionsWWF_2017/Biome_definitions.csv"))
colnames(biome_definitions) <- c("BIOME","BIOME_definition")

# Merge the biome definitions with the shapefile 
biomes <- merge(biomes, biome_definitions, by = "BIOME", all.x = TRUE)

# Filter out rows where BIOME is 98 and BIOME_definition is NA or empty
biomes <- biomes[!(biomes$BIOME == 98 &  (is.na(biomes$BIOME_definition) | biomes$BIOME_definition == "")), ]

## Regions (modified from Olson 2001)----
regions <- sf::st_read(normalizePath("../data/raw_data/mapping_data/Regions_WWF_2017/Ecoregions_Europe_Arabian_Peninsula.shp"))
regions <- sf::st_make_valid(regions)
regions <- sf::st_crop(regions, ext(c(-19,62,0,46.5)))
regions$Reg_names <- as.factor(regions$Reg_names)

##  African vegetation White (1983)----
phytogeographic_regions_White <- sf::st_read(normalizePath("../data/raw_data/mapping_data/Africa_Vegetation_White_1983/afwhite_2.shp"))
phytogeographic_regions_White <- sf::st_make_valid(phytogeographic_regions_White)

# Check if the crop extent is in the same CRS
crs_phytogeographic <- crs(phytogeographic_regions_White)
crs_extent <- st_crs(4326)  # Assuming the extent is in WGS84
if (!identical(crs_phytogeographic, crs_extent)) {
  phytogeographic_regions_White <- st_transform(phytogeographic_regions_White, crs = crs_extent)
}

phytogeographic_regions_White <- sf::st_crop(phytogeographic_regions_White, ext(c(-19,55,0,40)))
phytogeographic_regions_White$PHYTOCHO_1 <- as.factor(phytogeographic_regions_White$PHYTOCHO_1)


# Change names
phytogeographic_regions_White$PHYTOCHO_1 <- gsub("^[IVXLCDM]+\\.\\s*", "", phytogeographic_regions_White$PHYTOCHO_1)

phytogeographic_regions_White$PHYTOCHO_1 <- gsub("Mediterranean Region", "Mediterranean Africa", phytogeographic_regions_White$PHYTOCHO_1)

phytogeographic_regions_White$PHYTOCHO_1 <- gsub("VIII and IX. Afromontane and Afroalpine Regions", "Afromontane and Afroalpine Regions", phytogeographic_regions_White$PHYTOCHO_1)

phytogeographic_regions_White$PHYTOCHO_1 <- gsub("Guinca-Congolia/Zambczia Regional Transition Zone", "Guinea-Congolia/Zambezia Regional Transition Zone", phytogeographic_regions_White$PHYTOCHO_1)

phytogeographic_regions_White$PHYTOCHO_1 <- gsub("Sahara Regional TransitionZone", "Sahara Regional Transition", phytogeographic_regions_White$PHYTOCHO_1)

phytogeographic_regions_White$PHYTOCHO_1 <- gsub("Guinea-Congolia/Zambezia Regional Transition Zone", "Guineo-Congolian/Zambezian Transition ", phytogeographic_regions_White$PHYTOCHO_1)

phytogeographic_regions_White$PHYTOCHO_1 <- gsub("Guinea-Congolia/Sudania Regional Transition Zone", "Guineo-Congolian/Sudanian Transition", phytogeographic_regions_White$PHYTOCHO_1)

phytogeographic_regions_White$PHYTOCHO_1 <- gsub("Mediterranean/Sahara Regional Transition Zone", "Mediterranean/Sahara Transition", phytogeographic_regions_White$PHYTOCHO_1)

phytogeographic_regions_White$PHYTOCHO_1 <- gsub("Zanzibar-Inhambane Regional Mosaic", "Zanzibar-Inhambane Mosaic", phytogeographic_regions_White$PHYTOCHO_1)

phytogeographic_regions_White$PHYTOCHO_1 <- gsub("Sahara Regional Transition Zone", "Sahara Regional Transition", phytogeographic_regions_White$PHYTOCHO_1)

phytogeographic_regions_White$PHYTOCHO_1 <- gsub("Sahel Regional Transition Zone", "Sahel Regional Transition", phytogeographic_regions_White$PHYTOCHO_1)

##  Combine regions into one shapefile
# Check the CRS of both shapefiles
crs_regions <- st_crs(regions)
crs_phytogeographic <- st_crs(phytogeographic_regions_White)

# If the CRS are different, transform one to match the other
if (!identical(crs_regions, crs_phytogeographic)) {
  # Transform phytogeographic_regions_White CRS to match regions CRS
  phytogeographic_regions_White <- st_transform(phytogeographic_regions_White, crs = crs_regions)
}

# Ensure both shapefiles have matching columns
colnames(phytogeographic_regions_White)[colnames(phytogeographic_regions_White) == "PHYTOCHO_1"] <- "Region_Name"
colnames(regions)[colnames(regions) == "Reg_names"] <- "Region_Name"

phytogeographic_regions_White <- phytogeographic_regions_White |> select(Region_Name,geometry)
regions <- regions |>  select(Region_Name,geometry)

#  Merge both shapefiles
merged_phytogeographic_regions <- rbind(regions, phytogeographic_regions_White)

##  Elevation ----
elevation <- rast(normalizePath("../data/raw_data/mapping_data/elevation.tiff"))
elevation_crop <- crop(elevation,ext(c(-22,61.5,7,44)))

## Calculate hillshade for further plotting
slopes <- terrain(elevation_crop, "slope", unit = "radians")
aspect <- terrain(elevation_crop, "aspect", unit = "radians")
hs <- shade(slopes, aspect) # base shade for elevation plotting


```

```{r}
#| echo: false
#| output: true
#| fig-cap: "Figure 2. Map of dated fossil (a), undated fossil (b) and modern pollen records (c) compiled in the *NAAMPHoRA* database, the phytogeographical regions from White (1983) and Olson et al. (2001) (c) the biome map (d) from Olson et al. (2001)."

# Define the layout matrix
layout_matrix <- matrix(c(
  1, 2, 3,  # First row: 3 columns
  4, 5, 5, # Second row: 2 columns
  6, 7, 7  # Third row: 2 columns
), nrow = 3, byrow = TRUE)


layout(layout_matrix)  # Apply layout here

# Reduce margins to decrease space between plots
par(mar = c(3, 3, 2, 2), oma = c(0, 0, 0, 0))

### Plot 1: Fossil dated Records ###
plot(hs, col = gray(0:100 / 100), legend = FALSE, axes = TRUE)
plot(elevation_crop, col = terrain.colors(25), alpha = 0.5, legend = FALSE, axes = FALSE, add = TRUE)

points(sites$Longitude[sites$Dated == "Yes"],  
       sites$Latitude[sites$Dated == "Yes"],  
       col = "black",   # Outline color
       bg = "blue",    # Fill color
       pch = 21, cex = 1.2)  

mtext("(a)", side = 3, line = 1, at = -15, cex = 0.8)


### Plot 2: Fossil not dated Records ###
plot(hs, col = gray(0:100 / 100), legend = FALSE, axes = TRUE)
plot(elevation_crop, col = terrain.colors(25), alpha = 0.5, legend = FALSE, axes = FALSE, add = TRUE)
points(sites$Longitude[sites$Dated == "No"],  
       sites$Latitude[sites$Dated == "No"],  
       col = "black", bg = "red", pch = 21, cex = 1.2)  

mtext("(b)", side = 3, line = 1, at = -15, cex = 0.8)

### Plot 3: Modern Records ###
plot(hs, col = gray(0:100 / 100), legend = FALSE, axes = TRUE)
plot(elevation_crop, col = terrain.colors(25), alpha = 0.5, legend = TRUE, axes = FALSE, add = TRUE)

points(sites$Longitude[sites$Dated == "Modern"],  
       sites$Latitude[sites$Dated == "Modern"],  
       col = "black", bg = "green", pch = 21, cex = 1.2) 

mtext("(c)", side = 3, line = 1, at = -15, cex = 0.8)

### Plot 4: Phytogeographic Regions ###

# Define colors
n <- length(unique(merged_phytogeographic_regions$Region_Name))
colors_regions <- colorRampPalette(brewer.pal(12, "Set3"))(n)

plot(elevation_crop, col = terrain.colors(25), alpha = 0, legend = FALSE, axes = TRUE)
plot(st_geometry(merged_phytogeographic_regions), 
     col = colors_regions[as.numeric(merged_phytogeographic_regions$Region_Name)], 
     , border = "black", main = "", add = TRUE)

mtext("(d)", side = 3, line = 1, at = -15, cex = 0.8)

### Plot 5: Legend Phytogeographic Regions ###
par(mar = c(0, 0, 0, 0))  # Remove margins
plot(1, type = "n", axes = FALSE, xlab = "", ylab = "")
legend("left", 
       legend = levels(merged_phytogeographic_regions$Region_Name),
       fill = colors_regions, 
       border = "black", 
       cex = 1, 
       title = NULL, 
       bty = "n",  
       xpd = TRUE,
       ncol=2)
mtext("Phytogeographic regions                                                                   ", side = 3, line = -1, cex = 0.6, col = "black")



### Plot 6: Biomes ###
n <- length(unique(biomes$BIOME))
my_colors <- brewer.pal(min(n, 12), "Set3")  # Ensure no errors for >12 colors
biomes$col <- my_colors[as.integer(factor(biomes$BIOME))]

plot(elevation_crop, col = adjustcolor(terrain.colors(100), alpha.f = 0.5), legend = FALSE)  
plot(st_geometry(biomes), col = biomes$col, add = TRUE, border = "black")

mtext("(e)", side = 3, line = -1, at = -15, cex = 0.8)

### Plot 6: Legend biomes ###
par(mar = c(0, 0, 0, 0))  # Remove margins
plot(1, type = "n", axes = FALSE, xlab = "", ylab = "")
legend("left", 
       legend = unique(biomes$BIOME_definition),  
       fill = my_colors,  
       border = "black", 
       cex = 1,  
       title = "Biomes", 
       bty = "n", 
       xpd = TRUE)


```

`09_description_database_figures.R` (Creates graphs to summarise and
describe the database)

```{r}
#| echo: false
#| output: false
#| message: false

# Read data
taxonomy <- read_csv(normalizePath("../data/processed_data/taxonomy/harmonised_taxonomy_list.csv"))
phyto_aff <- read_csv(normalizePath("../data/processed_data/taxonomy/phytogeographic_affinity.csv"))
pft <- read_csv(normalizePath("../data/processed_data/plant_functional_types/total_pfts.csv"))

# 1) Number sites per bigeographic region----

# Total sites
sites_biogeo <- sites |> select(Site_name_machine_readable,'Biogeographic area')

# Count number of total sites per biogeographic region
site_counts <- sites_biogeo |> 
  count(`Biogeographic area`)
names(site_counts)[2] <- "Total"

# Modern sites
modern_sites_biogeo <- sites |> filter(Pollen=="Modern") |> select(Site_name_machine_readable,'Biogeographic area')

# Count number of total sites per biogeographic region
modern_site_counts <- modern_sites_biogeo |> 
  count(`Biogeographic area`)
names(modern_site_counts)[2] <- "Modern"

# Dated sites
site_dated_filtered <- sites |> filter(Pollen=="Fossil")|> filter(Dated == "Yes")

sites_dated_biogeo <- site_dated_filtered |>  select(Site_name_machine_readable,'Biogeographic area')

# Count number of sites per biogeographic region
site_dated_counts <- sites_dated_biogeo |> 
  count(`Biogeographic area`)
names(site_dated_counts)[2] <- "Dated"

# Not dated sites
site_not_dated_filtered <- sites |> filter(Pollen=="Fossil")|> filter(Dated == "No")
sites_not_dated_biogeo <- site_not_dated_filtered |>  select(Site_name_machine_readable,'Biogeographic area')

# Count number of sites per biogeographic region
site_not_dated_counts <- sites_not_dated_biogeo |> 
  count(`Biogeographic area`)
names(site_not_dated_counts)[2] <- "Not dated"

# Merge all counts into one dataframe
sites_combined <- site_counts |> 
  left_join(modern_site_counts, by = "Biogeographic area") |> 
  left_join(site_dated_counts, by = "Biogeographic area") |> 
  left_join(site_not_dated_counts, by = "Biogeographic area")

# Reshape data to long format for ggplot
sites_long <- sites_combined |> 
  pivot_longer(cols = c("Total", "Modern","Dated", "Not dated"), 
               names_to = "Site Type", 
               values_to = "Count")


# Define the order of periods (modify according to your data)
order <- c("Total", "Modern","Dated", "Not dated")

# Convert `Period` into a factor with the specified order
sites_long$`Site Type` <- factor(sites_long$`Site Type`, levels = order)


# Create the grouped bar plot
combined_barplot <- ggplot(sites_long, aes(x = `Biogeographic area`, y = Count, fill = `Site Type`)) +
  geom_bar(stat = "identity", position = position_dodge(), color = "black") +  # Dodge bars side by side
  theme_minimal() +
  labs(x = "Biogeographic region", 
       y = "Number of sites", 
       fill = "Site type") +  # Ensure legend title is explicitly set
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 18),
        axis.text.y = element_text(size = 16),
        axis.title.x = element_text(size = 18),
        axis.title.y = element_text(size = 18),
        plot.title = element_text(size = 22, face = "bold"),
        legend.title = element_text(size = 16),  
        legend.text = element_text(size = 14))


# 2) Number sites (fossil and modern) per database----

# Total sites
sites_database <- sites |>  select(Site_name_machine_readable,Database, Pollen)

# Count number of total sites per database
total_counts <- sites_database |> 
  count(Database)
names(total_counts)[2] <- "Total"

# Dated sites
sites_database_fossil <- sites_database |> filter(Pollen=="Fossil")

# Count number of sites per biogeographic region
fossil_counts <- sites_database_fossil |> 
  count(Database)
names(fossil_counts)[2] <- "Fossil"

# Not dated sites
sites_database_modern <- sites_database |> filter(Pollen=="Modern")

# Count number of sites per biogeographic region
modern_counts <- sites_database_modern |> 
  count(Database)
names(modern_counts)[2] <- "Modern"

# Merge all counts into one dataframe
sites_combined_database <- total_counts |> 
  left_join(fossil_counts, by = "Database") |> 
  left_join(modern_counts, by = "Database")

sites_combined_database <- sites_combined_database |> mutate(Database = ifelse(Database == "Received from authors", "From authors", Database))

# Reshape data to long format for ggplot
sites_long_database <- sites_combined_database |> 
  pivot_longer(cols = c("Total", "Fossil", "Modern"), 
               names_to = "Pollen Type", 
               values_to = "Count")

sites_long_database <- sites_long_database |> na.omit()

# Define the order
order <- c("APD", "Neotoma","APD/Neotoma", "From authors")

# Convert `Period` into a factor with the specified order
sites_long_database$Database <- factor(sites_long_database$Database, levels = order)

# Create the grouped bar plot
database_barplot <- ggplot(sites_long_database, aes(x = Database, y = Count, fill = `Pollen Type`)) +
  geom_bar(stat = "identity", position = position_dodge(), color = "black") +  # Dodge bars side by side
  theme_minimal() +
  labs(x = "Database", 
       y = "Number of sites", 
       fill = "Pollen type") +  
    scale_fill_manual(values = c("#56B4E9", "#A3B96C", "#E69F00")) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 18),
        axis.text.y = element_text(size = 16),
        axis.title.x = element_text(size = 18),
        axis.title.y = element_text(size = 18),
        plot.title = element_text(size = 22, face = "bold"),
        legend.title = element_text(size = 16),  
        legend.text = element_text(size = 14))


# 3) Number of dated records per time interval----

sites_temporal <- sites |>  select(Site_name_machine_readable,`Biogeographic area`, "Minimum mean cal BP", "Maximum mean cal BP")
sites_temporal$`Maximum mean cal BP`  <- sites_temporal$`Maximum mean cal BP` |>  as.numeric()
sites_temporal$`Minimum mean cal BP`  <- sites_temporal$`Minimum mean cal BP` |>  as.numeric()

# Define bin width (1000-year intervals)
bin_width <- 1000

# Create bins based on both `Minimum mean cal BP` and `Maximum mean cal BP`
dated_records_binned <- sites_temporal %>%
  mutate(
    year_bin = cut(
      `Minimum mean cal BP`, 
      breaks = seq(0, max(`Maximum mean cal BP`, na.rm = TRUE) + bin_width, by = bin_width),
      labels = FALSE,
      include.lowest = TRUE
    )
  ) %>%
  group_by(year_bin, `Biogeographic area`) %>%  # Group by both bins and Biogeographic area
  summarise(n = n(), .groups = "drop")  # Count occurrences

# Convert 'year_bin' back to numeric for plotting
dated_records_binned$year_bin <- as.numeric(as.character(dated_records_binned$year_bin)) * bin_width

# Remove NA values
dated_records_binned <- na.omit(dated_records_binned)

# Omit dates older than 20,000 years BP
dated_records_binned <- filter(dated_records_binned, year_bin <= 20000)

# Create the bar plot with color per Biogeographic area
dated_records_temporal_distribution <- ggplot(dated_records_binned, 
                                              aes(x = year_bin, y = n, fill = `Biogeographic area`)) +
  geom_bar(stat = "identity", color = "black", position = "stack") +  # Stack bars per Biogeographic area
  theme_minimal() +
  labs(x = "Years BP", y = "Number of sites", fill = "Biogeographic region") +
  scale_x_reverse() +  # Reverse x-axis for chronological representation
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  
        axis.text.y = element_text(size = 12),  
        axis.title.x = element_text(size = 12), 
        axis.title.y = element_text(size = 12),
        plot.title = element_text(size = 14),
        legend.title = element_text(size = 8), 
        legend.text = element_text(size = 8)) + 
  geom_segment(aes(x = 5500, xend = 14800, y = 30, yend = 30), color = "black", size = 1) +  # Horizontal line from x = 5500 to x = 14800 at y = 60
  # Small vertical lines at both ends
  geom_segment(aes(x = 5500, xend = 5500, y = 28, yend = 32), color = "black", size = 1) +  # Left end vertical
  geom_segment(aes(x = 14800, xend = 14800, y = 28, yend = 32), color = "black", size = 1) +  # Right end vertical
  annotate("text", x = (5500 + 14800) / 2, y = 35, label = "AHP", color = "black", size = 5, fontface = "bold", hjust = 0.5)  # Add text "AHP" at the center of the line



# 4) Latitudinal distribution of records according to their archive type----

sites_archive_type <- sites |> select(Site_name_machine_readable,Latitude,"Archive type")

# round latitude so it does not have decimals
sites_archive_type$Latitude <- as.numeric(sites_archive_type$Latitude)
sites_archive_type$Latitude <- round(sites_archive_type$Latitude,0)

names(sites_archive_type)[3] <- "Archive_type"

# Count the number of sites per latitude and archive type
sites_archive_type_count <- sites_archive_type %>%
  group_by(Latitude, Archive_type) %>%
  summarise(num_sites = n(), .groups = "drop")

sites_archive_type_count <- na.omit(sites_archive_type_count)

# Create the bar plot with different colors for each archive type
barplot_archive_type <- ggplot(sites_archive_type_count, aes(x = num_sites, y = factor(Latitude), fill = Archive_type)) +
  geom_col() +  # Creates bars for each latitude
  labs(
    x = "Number of sites",
    y = "Latitude (degrees)",
    fill = "Archive Type",
  ) +
  theme_minimal() +
  scale_fill_manual(values = c("skyblue", "darkblue", "darkorange", "black", "lightgreen", 
                               "gold", "purple", "turquoise", "blue", "violet", 
                               "yellow", "grey", "tomato", "darkgreen", 
                               "darkcyan", "chocolate3", "red", "pink", "steelblue", "chartreuse3","darkred","blueviolet","coral2","azure1","aquamarine","brown3","chartreuse1","burlywood2")) + # 28
  theme(
    legend.position = "top", 
    legend.text = element_text(size = 7),  
    legend.title = element_text(size = 8, face = "bold"),  
    axis.text.x = element_text(size = 8), 
    axis.text.y = element_text(size = 8), 
    axis.title.x = element_text(size = 8, face = "bold"),  
    axis.title.y = element_text(size = 8, face = "bold"),  
    plot.title = element_text(size = 8, face = "bold", hjust = 0.5)  
  )


# 5) Altitudinal distribution of records according to the biogeographic area----

sites_altitude_type <- sites |> select(Site_name_machine_readable,Altitude,"Biogeographic area","Archive type")

sites_altitude_type <- sites_altitude_type |> rename(Archive_type = "Archive type")

sites_altitude_type$Altitude <- as.numeric(sites_altitude_type$Altitude)

# Round down to nearest centennial
sites_altitude_type$Altitude <- floor(sites_altitude_type$Altitude / 100) * 100

names(sites_altitude_type)[3] <- "Biogeographic_area"

# Exclude marine cores
sites_altitude_type <- sites_altitude_type |> filter(Archive_type !="Marine core")

# Count the number of sites per altitude and biogeographic area
sites_altitude_type_count <- sites_altitude_type %>%
  group_by(Altitude, Biogeographic_area) %>%
  summarise(num_sites = n(), .groups = "drop")

sites_altitude_type_count <- na.omit(sites_altitude_type_count)

# Create the bar plot with different colors for each biogeographic area
barplot_altitude_biogeography <- ggplot(sites_altitude_type_count, aes(x = num_sites, y = factor(Altitude), fill = Biogeographic_area)) +
  geom_col() +  # Creates bars for each altitude
  labs(
    x = "Number of sites",
    y = "Altitude (meters)",
    fill = "Biogeographic area",
  ) +
  theme_minimal() +
  theme(
    legend.position = "top", 
    legend.text = element_text(size = 10),  
    legend.title = element_text(size = 16, face = "bold"),  
    axis.text.x = element_text(size = 10), 
    axis.text.y = element_text(size = 10), 
    axis.title.x = element_text(size = 16, face = "bold"),  
    axis.title.y = element_text(size = 16, face = "bold"),  
    plot.title = element_text(size = 18, face = "bold", hjust = 0.5)  
  )
# 6) Number of harmonised pollen taxa per phytogeographic affinity (proportion)----

# Reshape data into long format
phyto_aff_long <- phyto_aff %>%
  pivot_longer(cols = -Pollen_type_SM_morphological, # Keep Pollen_type_SM_morphological
               names_to = "phytogeographic_Affinity", # Affinities become a new column
               values_to = "Presence") %>%  # Presence/absence info
  filter(Presence == "x")  # Keep only rows where the pollen type is associated with the affinity

# Count the occurrences of each phytogeographic affinity
affinity_counts <- phyto_aff_long %>%
  count(phytogeographic_Affinity) %>%
  arrange(desc(n))  # Sort in descending order

# Calculate proportions 
affinity_percentages <- affinity_counts %>%
mutate(percentage = n / sum(n) * 100)

affinity_percentages$phytogeographic_Affinity <- gsub("_", " ", affinity_percentages$phytogeographic_Affinity) # removes the underscore in the names

affinity_percentages <- affinity_percentages |> arrange(desc(percentage))
order <- affinity_percentages$phytogeographic_Affinity

# Ensure the phytogeographic_Affinity is a factor with the desired order
affinity_percentages$phytogeographic_Affinity <- factor(affinity_percentages$phytogeographic_Affinity, levels = order)


phyto_aff_barplot <- ggplot(affinity_percentages, aes(x = phytogeographic_Affinity, y = percentage)) +
  geom_bar(stat = "identity", fill = "grey") + # fill all the bars in grey
  geom_text(aes(label = paste0(round(percentage, 1), "%")), 
            vjust = -0.5, 
            size = 6) +
  theme_minimal() +
  labs(x = "",
       y = "") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 18),
        axis.text.y = element_text(size = 18),
        axis.title.x = element_text(size = 20),
        axis.title.y = element_text(size = 18),
        legend.position = "none")  # removes the legend


# 7) Number of taxa (divided by family, genus and species) per plant functional trait -----

pft <- pft |> select(!c(Pollen_type_SM_morphological,Family,Genus,url_source,project_pi,project_pi_contact,Try_reference,Try_dataset,leaf_dry_mass_g))
                     
# Species (select those with two words)
species <- pft %>% 
  filter(str_detect(taxa, "^\\w+\\s+\\w+$"))
species_counts <- species |> select(-taxa) |> summarise(across(everything(), n_distinct, na.rm = TRUE))
species_counts <- t(species_counts) |> as.data.frame()
names(species_counts)[1] <- "species"


# Family (select taxa that ends with eae)
family <- pft %>% 
  filter(str_detect(taxa, "eae"))
family_counts <- family |> select(-taxa) |> summarise(across(everything(), n_distinct, na.rm = TRUE))
family_counts <- t(family_counts) |> as.data.frame()
names(family_counts)[1] <- "family"

# Genera
genera <- pft %>%
  filter(!taxa %in% species_counts$taxa & !taxa %in% family_counts$taxa)
genera_counts <-genera |> select(-taxa)|> summarise(across(everything(), n_distinct, na.rm = TRUE))
genera_counts <- t(genera_counts) |> as.data.frame()
names(genera_counts)[1] <- "genus"

# Merge all counts into one dataframe
pfts_counts_combined <- cbind(family_counts,genera_counts,species_counts)
pfts_counts_combined <- pfts_counts_combined %>%
  tibble::rownames_to_column(var = "row_name")  # Store row names

# Reshape data to long format for ggplot
pfts_counts_long <- pfts_counts_combined %>%
  pivot_longer(cols = -row_name, names_to = "category", values_to = "count")

# Define the order
pfts_counts_long <- pfts_counts_long |> arrange(desc(count))
order <- unique(pfts_counts_long$row_name)

# Modify the row names: Replace underscores with spaces and add parentheses around the last word
modified_order <- sub("_", " ", order)  # Replace underscores with spaces
modified_order <- c(
  "Seed mass (mg)",                                    # modified
  "Whole plant height (m)",                             # modified
  "Leaf area (mm2)",                                    # modified
  "Leaf nitrogen content per leaf dry mass (mg/g)",
  "Leaf dry mass per area (g/mm2)",
  "Plant flowering begin (month)",                      # modified
  "Longest whole plant longevity (years)",              # modified
  "Leaf life span (months)",                            # modified
  "Plant flowering begin date",
  "Whole plant growth form diversity",
  "Leaf type",
  "Whole plant dispersal syndrome",
  "Whole plant sexual system",
  "Whole plant vegetative phenology",
  "Flower pollination syndrome"
)


# Ensure the row_name is a factor with the desired order
pfts_counts_long$row_name <- factor(pfts_counts_long$row_name, levels = order)

# Apply modified names to the factor levels
levels(pfts_counts_long$row_name) <- modified_order

# Create the bar plot
pft_barplot <- ggplot(pfts_counts_long, aes(x = row_name, y = count, fill = category)) +
  geom_bar(stat = "identity", position = "dodge") +
  theme_minimal() +
  labs(x = "",
       y = "Count",
       fill = "Taxonomic Level") +
  scale_fill_manual(values = c("family" = "blue", "genus" = "green", "species" = "red")) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 18),
        axis.text.y = element_text(size = 18),
        axis.title.x = element_text(size = 20),
        axis.title.y = element_text(size = 18),
        legend.title = element_text(size = 18),  
        legend.text = element_text(size = 18),
        legend.position = "bottom")


```

```{r}
#| fig-cap: "Figure 3. Number of pollen records (sites) per biogeographic region"
combined_barplot
```

```{r}
#| fig-cap: "Figure 4. Number of pollen records (sites) per database"
database_barplot
```

```{r}
#| fig-cap: "Figure 5. Number of dated pollen records per time period in years before present. The horizontal line indicates the African Humid Period (14,800 to 5,000 years Before Present)"
dated_records_temporal_distribution
```

```{r}
#| fig-cap: "Figure 7. Latitudinal distribution of pollen records (sites) according to their archive type"
barplot_archive_type
```

```{r}
#| fig-cap: "Figure 8. Altitudinal distribution of pollen records (sites) according to the biogeographic area"
barplot_altitude_biogeography
```

```{r}
#| fig-cap: "Figure 9. Proportion of harmonised pollen types per phytogeographic affinity"
phyto_aff_barplot
```

```{r}
#| fig-cap: "Figure 10. Number of taxa per plant functional trait categorised by taxonomic level (i.e., family, genus, or species)."
pft_barplot
```

## Metadata {#metadata}

`pollen_metadata.qmd` (Generates a csv and HTML files containing pollen
metadata for the *database.csv* file)

`taxonomy_metadata.qmd` (Generates a csv and HTML files containing
metadata for the *harmonised_taxonomy_list.csv* file)

`pfts_metadata.qmd` (Generates a csv and HTML files containing metadata
for the *total_pfts.csv* file)

`calibration_metadata.qmd` (Generates a csv and HTML files containing
metadata for the calibration_information*.csv* file)

## Functions {#functions}

`functions.R` (Contains custom functions used throughout the data
pipeline)

# References {#references}

1.  Giesecke, T., et al. Towards mapping the late Quaternary vegetation
    change of Europe. *Vegetation History and Archaeobotany, 23*, 75–86.
    (2014).
2.  Lazagabaster, I. A., et al. Evaluating species distribution model
    predictions through time against paleozoological records. *Ecology
    and Evolution, 14*, e70288. (2024).
3.  Lézine, A. M., Watrin, J., Vincens, A., & Hély, C. Are modern pollen
    data representative of West African vegetation? *Review of
    Palaeobotany and Palynology, 156*, 265–276. (2009).
4.  Mott, O., et al. Global acceleration in rates of vegetation change
    over the past 18,000 years. *Science, 372*, 860–864. (2021).
5.  Vincens, A., Lézine, A. M., Buchet, G., Lewden, D., & Le Thomas, A.
    African pollen database inventory of tree and shrub pollen types.
    *Review of Palaeobotany and Palynology, 145*, 135–141. (2007).
6.  White, F. *The Vegetation of Africa: A Descriptive Memoir to
    Accompany the Unesco/AETFAT/UNSO Vegetation Map of Africa*. (Unesco,
    Paris, 1983).
